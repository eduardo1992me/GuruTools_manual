import { TGetTooltipLabels, TManualStyles } from "./calendar.types";
export declare const getStylesWithColorScheme: ({ isRoundedLeft, isSelected, colorScheme, isSelectionStart, isSelectionEnd, isFocusVisible, isUnavailable, isDisabled, }: TManualStyles) => {
    containerBg: string | undefined;
    boxShadowFocusVisible: string | undefined;
    stylesWhenIsSelectionStart: {};
    stylesWhenIsSelectionEnd: {};
    compoundVariantsForSelectionStart: {};
    compoundVariantsForSelectionEnd: {};
    hoverElementThatIsNotSelection: {
        "&:hover": {
            backgroundColor: string;
        };
    } | {
        "&:hover"?: undefined;
    };
    hoverStartSelection: {};
    hoverEndSelection: {};
};
export declare function capitalizeFirstLetter(value: string): string;
export declare const getTooltipLabels: ({ day, night, numberOfDays, }: TGetTooltipLabels) => {
    nightLabel: string | null;
    dayLabel: string | null;
};
export declare type ResponsiveValue<T> = T extends string ? string : Record<string, string>;
export declare const decreaseResponsiveValue: <T>(value: ResponsiveValue<T>, cssKey: string) => Record<string, Record<string, string>> | {
    [x: string]: string;
};
export declare const increaseResponsiveValue: <T>(value: ResponsiveValue<T>, cssKey: string) => Record<string, Record<string, string>> | {
    [x: string]: string;
};
