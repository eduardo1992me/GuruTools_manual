/// <reference types="react" />
import type * as Stitches from "@stitches/react";
import { Theme, BaseTheme } from "./types";
export declare const getStitchesTheme: (targetTheme: BaseTheme) => BaseTheme;
export declare const createThemeBase: <Argument0 extends string | ({
    shadows?: {
        "2xs"?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        outline?: string | number | boolean | undefined;
        inner?: string | number | boolean | undefined;
        none?: string | number | boolean | undefined;
        dark?: string | number | boolean | undefined;
    } | undefined;
    colors?: {
        gray1?: string | number | boolean | undefined;
        gray2?: string | number | boolean | undefined;
        gray3?: string | number | boolean | undefined;
        gray4?: string | number | boolean | undefined;
        gray5?: string | number | boolean | undefined;
        gray6?: string | number | boolean | undefined;
        gray7?: string | number | boolean | undefined;
        gray8?: string | number | boolean | undefined;
        gray9?: string | number | boolean | undefined;
        gray10?: string | number | boolean | undefined;
        gray11?: string | number | boolean | undefined;
        gray12?: string | number | boolean | undefined;
        text1?: string | number | boolean | undefined;
        text2?: string | number | boolean | undefined;
        text3?: string | number | boolean | undefined;
        text4?: string | number | boolean | undefined;
        text5?: string | number | boolean | undefined;
        text6?: string | number | boolean | undefined;
        text7?: string | number | boolean | undefined;
        text8?: string | number | boolean | undefined;
        text9?: string | number | boolean | undefined;
        text10?: string | number | boolean | undefined;
        text11?: string | number | boolean | undefined;
        text12?: string | number | boolean | undefined;
        guru1?: string | number | boolean | undefined;
        guru2?: string | number | boolean | undefined;
        guru3?: string | number | boolean | undefined;
        guru4?: string | number | boolean | undefined;
        guru5?: string | number | boolean | undefined;
        guru6?: string | number | boolean | undefined;
        guru7?: string | number | boolean | undefined;
        guru8?: string | number | boolean | undefined;
        guru9?: string | number | boolean | undefined;
        guru10?: string | number | boolean | undefined;
        guru11?: string | number | boolean | undefined;
        guru12?: string | number | boolean | undefined;
        fellow1?: string | number | boolean | undefined;
        fellow2?: string | number | boolean | undefined;
        fellow3?: string | number | boolean | undefined;
        fellow4?: string | number | boolean | undefined;
        fellow5?: string | number | boolean | undefined;
        fellow6?: string | number | boolean | undefined;
        fellow7?: string | number | boolean | undefined;
        fellow8?: string | number | boolean | undefined;
        fellow9?: string | number | boolean | undefined;
        fellow10?: string | number | boolean | undefined;
        fellow11?: string | number | boolean | undefined;
        fellow12?: string | number | boolean | undefined;
        darkie1?: string | number | boolean | undefined;
        darkie2?: string | number | boolean | undefined;
        darkie3?: string | number | boolean | undefined;
        darkie4?: string | number | boolean | undefined;
        darkie5?: string | number | boolean | undefined;
        darkie6?: string | number | boolean | undefined;
        darkie7?: string | number | boolean | undefined;
        darkie8?: string | number | boolean | undefined;
        darkie9?: string | number | boolean | undefined;
        darkie10?: string | number | boolean | undefined;
        darkie11?: string | number | boolean | undefined;
        darkie12?: string | number | boolean | undefined;
        red1?: string | number | boolean | undefined;
        red2?: string | number | boolean | undefined;
        red3?: string | number | boolean | undefined;
        red4?: string | number | boolean | undefined;
        red5?: string | number | boolean | undefined;
        red6?: string | number | boolean | undefined;
        red7?: string | number | boolean | undefined;
        red8?: string | number | boolean | undefined;
        red9?: string | number | boolean | undefined;
        red10?: string | number | boolean | undefined;
        red11?: string | number | boolean | undefined;
        red12?: string | number | boolean | undefined;
        nature1?: string | number | boolean | undefined;
        nature2?: string | number | boolean | undefined;
        nature3?: string | number | boolean | undefined;
        nature4?: string | number | boolean | undefined;
        nature5?: string | number | boolean | undefined;
        nature6?: string | number | boolean | undefined;
        nature7?: string | number | boolean | undefined;
        nature8?: string | number | boolean | undefined;
        nature9?: string | number | boolean | undefined;
        nature10?: string | number | boolean | undefined;
        nature11?: string | number | boolean | undefined;
        nature12?: string | number | boolean | undefined;
        sunshine1?: string | number | boolean | undefined;
        sunshine2?: string | number | boolean | undefined;
        sunshine3?: string | number | boolean | undefined;
        sunshine4?: string | number | boolean | undefined;
        sunshine5?: string | number | boolean | undefined;
        sunshine6?: string | number | boolean | undefined;
        sunshine7?: string | number | boolean | undefined;
        sunshine8?: string | number | boolean | undefined;
        sunshine9?: string | number | boolean | undefined;
        sunshine10?: string | number | boolean | undefined;
        sunshine11?: string | number | boolean | undefined;
        sunshine12?: string | number | boolean | undefined;
        violet1?: string | number | boolean | undefined;
        violet2?: string | number | boolean | undefined;
        violet3?: string | number | boolean | undefined;
        violet4?: string | number | boolean | undefined;
        violet5?: string | number | boolean | undefined;
        violet6?: string | number | boolean | undefined;
        violet7?: string | number | boolean | undefined;
        violet8?: string | number | boolean | undefined;
        violet9?: string | number | boolean | undefined;
        violet10?: string | number | boolean | undefined;
        violet11?: string | number | boolean | undefined;
        violet12?: string | number | boolean | undefined;
        blackA1?: string | number | boolean | undefined;
        blackA2?: string | number | boolean | undefined;
        blackA3?: string | number | boolean | undefined;
        blackA4?: string | number | boolean | undefined;
        blackA5?: string | number | boolean | undefined;
        blackA6?: string | number | boolean | undefined;
        blackA7?: string | number | boolean | undefined;
        blackA8?: string | number | boolean | undefined;
        blackA9?: string | number | boolean | undefined;
        blackA10?: string | number | boolean | undefined;
        blackA11?: string | number | boolean | undefined;
        blackA12?: string | number | boolean | undefined;
        whiteA1?: string | number | boolean | undefined;
        whiteA2?: string | number | boolean | undefined;
        whiteA3?: string | number | boolean | undefined;
        whiteA4?: string | number | boolean | undefined;
        whiteA5?: string | number | boolean | undefined;
        whiteA6?: string | number | boolean | undefined;
        whiteA7?: string | number | boolean | undefined;
        whiteA8?: string | number | boolean | undefined;
        whiteA9?: string | number | boolean | undefined;
        whiteA10?: string | number | boolean | undefined;
        whiteA11?: string | number | boolean | undefined;
        whiteA12?: string | number | boolean | undefined;
        transparent?: string | number | boolean | undefined;
        placeholder?: string | number | boolean | undefined;
        surfaceLight?: string | number | boolean | undefined;
        surfaceMid?: string | number | boolean | undefined;
        surfaceDark?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        heading?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        mono?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        "2xs"?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        "4xl"?: string | number | boolean | undefined;
        "5xl"?: string | number | boolean | undefined;
        "6xl"?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        hairline?: string | number | boolean | undefined;
        thin?: string | number | boolean | undefined;
        light?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        semibold?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
        extrabold?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        normal?: string | number | boolean | undefined;
        none?: string | number | boolean | undefined;
        shorter?: string | number | boolean | undefined;
        short?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        tall?: string | number | boolean | undefined;
        taller?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
    } | undefined;
    letterSpacings?: {
        tighter?: string | number | boolean | undefined;
        tight?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        wide?: string | number | boolean | undefined;
        wider?: string | number | boolean | undefined;
        widest?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        px?: string | number | boolean | undefined;
        0?: string | number | boolean | undefined;
        0.5?: string | number | boolean | undefined;
        1?: string | number | boolean | undefined;
        1.5?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        2.5?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        3.5?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        14?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        28?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        36?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        44?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        52?: string | number | boolean | undefined;
        56?: string | number | boolean | undefined;
        60?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        72?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
        96?: string | number | boolean | undefined;
    } | undefined;
    sizes?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        14?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        28?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        36?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        44?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        52?: string | number | boolean | undefined;
        56?: string | number | boolean | undefined;
        60?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        72?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
        96?: string | number | boolean | undefined;
        max?: string | number | boolean | undefined;
        min?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
        "3xs"?: string | number | boolean | undefined;
        "2xs"?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        "4xl"?: string | number | boolean | undefined;
        "5xl"?: string | number | boolean | undefined;
        "6xl"?: string | number | boolean | undefined;
        "7xl"?: string | number | boolean | undefined;
        "8xl"?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        none?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        halfBase?: string | number | boolean | undefined;
    } | undefined;
    zIndices?: {
        hide?: string | number | boolean | undefined;
        auto?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        docked?: string | number | boolean | undefined;
        dropdown?: string | number | boolean | undefined;
        sticky?: string | number | boolean | undefined;
        banner?: string | number | boolean | undefined;
        overlay?: string | number | boolean | undefined;
        modal?: string | number | boolean | undefined;
        popover?: string | number | boolean | undefined;
        skipLink?: string | number | boolean | undefined;
        toast?: string | number | boolean | undefined;
        tooltip?: string | number | boolean | undefined;
    } | undefined;
    borderWeights?: {
        light?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
        extrabold?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
    } | undefined;
    transitions?: {
        default?: string | number | boolean | undefined;
    } | undefined;
    breakpoints?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        xxl?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    shadows?: {
        "2xs"?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        outline?: string | number | boolean | undefined;
        inner?: string | number | boolean | undefined;
        none?: string | number | boolean | undefined;
        dark?: string | number | boolean | undefined;
    } | undefined;
    colors?: {
        gray1?: string | number | boolean | undefined;
        gray2?: string | number | boolean | undefined;
        gray3?: string | number | boolean | undefined;
        gray4?: string | number | boolean | undefined;
        gray5?: string | number | boolean | undefined;
        gray6?: string | number | boolean | undefined;
        gray7?: string | number | boolean | undefined;
        gray8?: string | number | boolean | undefined;
        gray9?: string | number | boolean | undefined;
        gray10?: string | number | boolean | undefined;
        gray11?: string | number | boolean | undefined;
        gray12?: string | number | boolean | undefined;
        text1?: string | number | boolean | undefined;
        text2?: string | number | boolean | undefined;
        text3?: string | number | boolean | undefined;
        text4?: string | number | boolean | undefined;
        text5?: string | number | boolean | undefined;
        text6?: string | number | boolean | undefined;
        text7?: string | number | boolean | undefined;
        text8?: string | number | boolean | undefined;
        text9?: string | number | boolean | undefined;
        text10?: string | number | boolean | undefined;
        text11?: string | number | boolean | undefined;
        text12?: string | number | boolean | undefined;
        guru1?: string | number | boolean | undefined;
        guru2?: string | number | boolean | undefined;
        guru3?: string | number | boolean | undefined;
        guru4?: string | number | boolean | undefined;
        guru5?: string | number | boolean | undefined;
        guru6?: string | number | boolean | undefined;
        guru7?: string | number | boolean | undefined;
        guru8?: string | number | boolean | undefined;
        guru9?: string | number | boolean | undefined;
        guru10?: string | number | boolean | undefined;
        guru11?: string | number | boolean | undefined;
        guru12?: string | number | boolean | undefined;
        fellow1?: string | number | boolean | undefined;
        fellow2?: string | number | boolean | undefined;
        fellow3?: string | number | boolean | undefined;
        fellow4?: string | number | boolean | undefined;
        fellow5?: string | number | boolean | undefined;
        fellow6?: string | number | boolean | undefined;
        fellow7?: string | number | boolean | undefined;
        fellow8?: string | number | boolean | undefined;
        fellow9?: string | number | boolean | undefined;
        fellow10?: string | number | boolean | undefined;
        fellow11?: string | number | boolean | undefined;
        fellow12?: string | number | boolean | undefined;
        darkie1?: string | number | boolean | undefined;
        darkie2?: string | number | boolean | undefined;
        darkie3?: string | number | boolean | undefined;
        darkie4?: string | number | boolean | undefined;
        darkie5?: string | number | boolean | undefined;
        darkie6?: string | number | boolean | undefined;
        darkie7?: string | number | boolean | undefined;
        darkie8?: string | number | boolean | undefined;
        darkie9?: string | number | boolean | undefined;
        darkie10?: string | number | boolean | undefined;
        darkie11?: string | number | boolean | undefined;
        darkie12?: string | number | boolean | undefined;
        red1?: string | number | boolean | undefined;
        red2?: string | number | boolean | undefined;
        red3?: string | number | boolean | undefined;
        red4?: string | number | boolean | undefined;
        red5?: string | number | boolean | undefined;
        red6?: string | number | boolean | undefined;
        red7?: string | number | boolean | undefined;
        red8?: string | number | boolean | undefined;
        red9?: string | number | boolean | undefined;
        red10?: string | number | boolean | undefined;
        red11?: string | number | boolean | undefined;
        red12?: string | number | boolean | undefined;
        nature1?: string | number | boolean | undefined;
        nature2?: string | number | boolean | undefined;
        nature3?: string | number | boolean | undefined;
        nature4?: string | number | boolean | undefined;
        nature5?: string | number | boolean | undefined;
        nature6?: string | number | boolean | undefined;
        nature7?: string | number | boolean | undefined;
        nature8?: string | number | boolean | undefined;
        nature9?: string | number | boolean | undefined;
        nature10?: string | number | boolean | undefined;
        nature11?: string | number | boolean | undefined;
        nature12?: string | number | boolean | undefined;
        sunshine1?: string | number | boolean | undefined;
        sunshine2?: string | number | boolean | undefined;
        sunshine3?: string | number | boolean | undefined;
        sunshine4?: string | number | boolean | undefined;
        sunshine5?: string | number | boolean | undefined;
        sunshine6?: string | number | boolean | undefined;
        sunshine7?: string | number | boolean | undefined;
        sunshine8?: string | number | boolean | undefined;
        sunshine9?: string | number | boolean | undefined;
        sunshine10?: string | number | boolean | undefined;
        sunshine11?: string | number | boolean | undefined;
        sunshine12?: string | number | boolean | undefined;
        violet1?: string | number | boolean | undefined;
        violet2?: string | number | boolean | undefined;
        violet3?: string | number | boolean | undefined;
        violet4?: string | number | boolean | undefined;
        violet5?: string | number | boolean | undefined;
        violet6?: string | number | boolean | undefined;
        violet7?: string | number | boolean | undefined;
        violet8?: string | number | boolean | undefined;
        violet9?: string | number | boolean | undefined;
        violet10?: string | number | boolean | undefined;
        violet11?: string | number | boolean | undefined;
        violet12?: string | number | boolean | undefined;
        blackA1?: string | number | boolean | undefined;
        blackA2?: string | number | boolean | undefined;
        blackA3?: string | number | boolean | undefined;
        blackA4?: string | number | boolean | undefined;
        blackA5?: string | number | boolean | undefined;
        blackA6?: string | number | boolean | undefined;
        blackA7?: string | number | boolean | undefined;
        blackA8?: string | number | boolean | undefined;
        blackA9?: string | number | boolean | undefined;
        blackA10?: string | number | boolean | undefined;
        blackA11?: string | number | boolean | undefined;
        blackA12?: string | number | boolean | undefined;
        whiteA1?: string | number | boolean | undefined;
        whiteA2?: string | number | boolean | undefined;
        whiteA3?: string | number | boolean | undefined;
        whiteA4?: string | number | boolean | undefined;
        whiteA5?: string | number | boolean | undefined;
        whiteA6?: string | number | boolean | undefined;
        whiteA7?: string | number | boolean | undefined;
        whiteA8?: string | number | boolean | undefined;
        whiteA9?: string | number | boolean | undefined;
        whiteA10?: string | number | boolean | undefined;
        whiteA11?: string | number | boolean | undefined;
        whiteA12?: string | number | boolean | undefined;
        transparent?: string | number | boolean | undefined;
        placeholder?: string | number | boolean | undefined;
        surfaceLight?: string | number | boolean | undefined;
        surfaceMid?: string | number | boolean | undefined;
        surfaceDark?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        heading?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        mono?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        "2xs"?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        "4xl"?: string | number | boolean | undefined;
        "5xl"?: string | number | boolean | undefined;
        "6xl"?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        hairline?: string | number | boolean | undefined;
        thin?: string | number | boolean | undefined;
        light?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        semibold?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
        extrabold?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        normal?: string | number | boolean | undefined;
        none?: string | number | boolean | undefined;
        shorter?: string | number | boolean | undefined;
        short?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        tall?: string | number | boolean | undefined;
        taller?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
    } | undefined;
    letterSpacings?: {
        tighter?: string | number | boolean | undefined;
        tight?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        wide?: string | number | boolean | undefined;
        wider?: string | number | boolean | undefined;
        widest?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        px?: string | number | boolean | undefined;
        0?: string | number | boolean | undefined;
        0.5?: string | number | boolean | undefined;
        1?: string | number | boolean | undefined;
        1.5?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        2.5?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        3.5?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        14?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        28?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        36?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        44?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        52?: string | number | boolean | undefined;
        56?: string | number | boolean | undefined;
        60?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        72?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
        96?: string | number | boolean | undefined;
    } | undefined;
    sizes?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        9?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        14?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        24?: string | number | boolean | undefined;
        28?: string | number | boolean | undefined;
        32?: string | number | boolean | undefined;
        36?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        44?: string | number | boolean | undefined;
        48?: string | number | boolean | undefined;
        52?: string | number | boolean | undefined;
        56?: string | number | boolean | undefined;
        60?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        72?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
        96?: string | number | boolean | undefined;
        max?: string | number | boolean | undefined;
        min?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
        "3xs"?: string | number | boolean | undefined;
        "2xs"?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        "4xl"?: string | number | boolean | undefined;
        "5xl"?: string | number | boolean | undefined;
        "6xl"?: string | number | boolean | undefined;
        "7xl"?: string | number | boolean | undefined;
        "8xl"?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        none?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        "2xl"?: string | number | boolean | undefined;
        "3xl"?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        halfBase?: string | number | boolean | undefined;
    } | undefined;
    zIndices?: {
        hide?: string | number | boolean | undefined;
        auto?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        docked?: string | number | boolean | undefined;
        dropdown?: string | number | boolean | undefined;
        sticky?: string | number | boolean | undefined;
        banner?: string | number | boolean | undefined;
        overlay?: string | number | boolean | undefined;
        modal?: string | number | boolean | undefined;
        popover?: string | number | boolean | undefined;
        skipLink?: string | number | boolean | undefined;
        toast?: string | number | boolean | undefined;
        tooltip?: string | number | boolean | undefined;
    } | undefined;
    borderWeights?: {
        light?: string | number | boolean | undefined;
        normal?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
        extrabold?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
    } | undefined;
    transitions?: {
        default?: string | number | boolean | undefined;
    } | undefined;
    breakpoints?: {
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        xxl?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? import("@stitches/react/types/stitches").ThemeTokens<Argument1, string> : import("@stitches/react/types/stitches").ThemeTokens<Argument0, string>);
export declare const styled: <Type extends import("@stitches/react/types/util").Function | import("react").ComponentType<any> | keyof JSX.IntrinsicElements, Composers extends (string | import("@stitches/react/types/util").Function | import("react").ComponentType<any> | {
    [name: string]: unknown;
})[], CSS_1 = import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [Stitches.$$PropertyValue]: "height";
    }, {
        readonly [Stitches.$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [Stitches.$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [Stitches.$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [Stitches.$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [Stitches.$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [Stitches.$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [Stitches.$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [Stitches.$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [Stitches.$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [Stitches.$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [Stitches.$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [Stitches.$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [Stitches.$$PropertyValue]: "gap";
        };
    };
}>>(type: Type, ...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").ComponentType<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : import("@stitches/react/types/util").WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS_1 & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; } : never); }) => import("@stitches/react/types/styled-component").StyledComponent<Type, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [Stitches.$$PropertyValue]: "height";
    }, {
        readonly [Stitches.$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [Stitches.$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [Stitches.$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [Stitches.$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [Stitches.$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [Stitches.$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [Stitches.$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [Stitches.$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [Stitches.$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [Stitches.$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [Stitches.$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [Stitches.$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [Stitches.$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const css: <Composers extends (string | import("@stitches/react/types/util").Function | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> | {
    [name: string]: unknown;
})[], CSS_1 = import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [Stitches.$$PropertyValue]: "height";
    }, {
        readonly [Stitches.$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [Stitches.$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [Stitches.$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [Stitches.$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [Stitches.$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [Stitches.$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [Stitches.$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [Stitches.$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [Stitches.$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [Stitches.$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [Stitches.$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [Stitches.$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [Stitches.$$PropertyValue]: "gap";
        };
    };
}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | import("@stitches/react/types/util").Function | import("react").JSXElementConstructor<any> | import("react").ExoticComponent<any> ? Composers[K] : import("@stitches/react/types/stitches").RemoveIndex<CSS_1> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS_1;
            [x: number]: CSS_1;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T ? { [Name in keyof T]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : never : import("@stitches/react/types/util").WideObject) & {
        css: CSS_1;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? Composers[K][keyof Composers[K] & "variants"] extends infer T_1 ? { [Name_1 in keyof T_1]?: import("@stitches/react/types/util").String | import("@stitches/react/types/util").Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : never : import("@stitches/react/types/util").WideObject) | undefined;
} & CSS_1 & (Composers[K] extends infer T_2 ? { [K2 in keyof T_2]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS_1 ? CSS_1[K2] : unknown; } : never); }) => import("@stitches/react/types/styled-component").CssComponent<import("@stitches/react/types/styled-component").StyledComponentType<Composers>, import("@stitches/react/types/styled-component").StyledComponentProps<Composers>, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, CSS_1>;
export declare const globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? import("@stitches/react/types/css").AtRule.FontFace | import("@stitches/react/types/css").AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: import("@stitches/react/types/css-util").CSS<{
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
        motion: string;
        safari: string;
        hover: string;
        dark: string;
        light: string;
    }, {
        shadows: {
            "2xs": string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            outline: string;
            inner: string;
            none: string;
            dark: string;
        };
        colors: {
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            gray7: string;
            gray8: string;
            gray9: string;
            gray10: string;
            gray11: string;
            gray12: string;
            text1: string;
            text2: string;
            text3: string;
            text4: string;
            text5: string;
            text6: string;
            text7: string;
            text8: string;
            text9: string;
            text10: string;
            text11: string;
            text12: string;
            guru1: string;
            guru2: string;
            guru3: string;
            guru4: string;
            guru5: string;
            guru6: string;
            guru7: string;
            guru8: string;
            guru9: string;
            guru10: string;
            guru11: string;
            guru12: string;
            fellow1: string;
            fellow2: string;
            fellow3: string;
            fellow4: string;
            fellow5: string;
            fellow6: string;
            fellow7: string;
            fellow8: string;
            fellow9: string;
            fellow10: string;
            fellow11: string;
            fellow12: string;
            darkie1: string;
            darkie2: string;
            darkie3: string;
            darkie4: string;
            darkie5: string;
            darkie6: string;
            darkie7: string;
            darkie8: string;
            darkie9: string;
            darkie10: string;
            darkie11: string;
            darkie12: string;
            red1: string;
            red2: string;
            red3: string;
            red4: string;
            red5: string;
            red6: string;
            red7: string;
            red8: string;
            red9: string;
            red10: string;
            red11: string;
            red12: string;
            nature1: string;
            nature2: string;
            nature3: string;
            nature4: string;
            nature5: string;
            nature6: string;
            nature7: string;
            nature8: string;
            nature9: string;
            nature10: string;
            nature11: string;
            nature12: string;
            sunshine1: string;
            sunshine2: string;
            sunshine3: string;
            sunshine4: string;
            sunshine5: string;
            sunshine6: string;
            sunshine7: string;
            sunshine8: string;
            sunshine9: string;
            sunshine10: string;
            sunshine11: string;
            sunshine12: string;
            violet1: string;
            violet2: string;
            violet3: string;
            violet4: string;
            violet5: string;
            violet6: string;
            violet7: string;
            violet8: string;
            violet9: string;
            violet10: string;
            violet11: string;
            violet12: string;
            blackA1: string;
            blackA2: string;
            blackA3: string;
            blackA4: string;
            blackA5: string;
            blackA6: string;
            blackA7: string;
            blackA8: string;
            blackA9: string;
            blackA10: string;
            blackA11: string;
            blackA12: string;
            whiteA1: string;
            whiteA2: string;
            whiteA3: string;
            whiteA4: string;
            whiteA5: string;
            whiteA6: string;
            whiteA7: string;
            whiteA8: string;
            whiteA9: string;
            whiteA10: string;
            whiteA11: string;
            whiteA12: string;
            transparent: string;
            placeholder: string;
            surfaceLight: string;
            surfaceMid: string;
            surfaceDark: string;
        };
        fonts: {
            heading: string;
            base: string;
            mono: string;
        };
        fontSizes: {
            "2xs": string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
            black: number;
        };
        lineHeights: {
            normal: string;
            none: number;
            shorter: number;
            short: number;
            base: number;
            tall: number;
            taller: string;
            "3": string;
            "4": string;
            "5": string;
            "6": string;
            "7": string;
            "8": string;
            "9": string;
            "10": string;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        space: {
            px: string;
            0: string;
            0.5: string;
            1: string;
            1.5: string;
            2: string;
            2.5: string;
            3: string;
            3.5: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            12: string;
            14: string;
            16: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            12: string;
            14: string;
            16: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
            max: string;
            min: string;
            full: string;
            "3xs": string;
            "2xs": string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
        };
        radii: {
            none: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
            base: string;
            halfBase: string;
        };
        zIndices: {
            hide: number;
            auto: string;
            base: number;
            docked: number;
            dropdown: number;
            sticky: number;
            banner: number;
            overlay: number;
            modal: number;
            popover: number;
            skipLink: number;
            toast: number;
            tooltip: number;
        };
        borderWeights: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
        };
        transitions: {
            default: string;
        };
        breakpoints: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            xxl: string;
        };
    }, {
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        width: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        height: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {
        _hover: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:hover": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _active: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:active": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _focus: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:focus": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _disabled: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:disabled": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _visited: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:visited": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _focusWithin: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:focus-within": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _focusVisible: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:focus-visible": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _target: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:target": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _placeholder: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&::placeholder": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        bg: (value: {
            readonly [Stitches.$$PropertyValue]: "color";
        }) => {
            background: {
                readonly [Stitches.$$PropertyValue]: "color";
            };
        };
        bgColor: (value: {
            readonly [Stitches.$$PropertyValue]: "color";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "color";
            };
        };
        bgImage: (value: {
            readonly [Stitches.$$PropertyValue]: "color";
        }) => {
            backgroundImage: {
                readonly [Stitches.$$PropertyValue]: "color";
            };
        };
        linearGradient: (value: string) => {
            backgroundImage: string;
        };
        br: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        rounded: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedTop: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedBottom: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedLeft: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedRight: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        size: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        btnSize: ([size, space]: [{
            readonly [Stitches.$$PropertyValue]: "height";
        }, {
            readonly [Stitches.$$PropertyValue]: "padding";
        }]) => {
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
            paddingInlineStart: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingInlineEnd: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        w: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        minW: (value: {
            readonly [Stitches.$$PropertyValue]: "minWidth";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "minWidth";
            };
        };
        maxW: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidht: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        h: (value: {
            readonly [Stitches.$$PropertyValue]: "height";
        }) => {
            height: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
        };
        minH: (value: {
            readonly [Stitches.$$PropertyValue]: "minHeight";
        }) => {
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "minHeight";
            };
        };
        maxH: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        m: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            margin: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        mt: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        mr: (value: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        }) => {
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginRight";
            };
        };
        mb: (value: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        }) => {
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginBottom";
            };
        };
        ml: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        mx: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        my: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        marginX: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        marginY: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        p: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            padding: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        pt: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        pr: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        }) => {
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingRight";
            };
        };
        pb: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        }) => {
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingBottom";
            };
        };
        pl: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        px: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        py: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        paddingX: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        paddingY: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        shadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        borderW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        }) => {
            borderWidth: {
                readonly [Stitches.$$PropertyValue]: "borderWidth";
            };
        };
        borderTopW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopWidth";
        }) => {
            borderTopWidth: {
                readonly [Stitches.$$PropertyValue]: "borderTopWidth";
            };
        };
        borderRightW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRightWidth";
        }) => {
            borderRightWidth: {
                readonly [Stitches.$$PropertyValue]: "borderRightWidth";
            };
        };
        borderBottomW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
        }) => {
            borderBottomWidth: {
                readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
            };
        };
        borderLeftW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
        }) => {
            borderLeftWidth: {
                readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
            };
        };
        borderS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderStyle";
        }) => {
            borderStyle: {
                readonly [Stitches.$$PropertyValue]: "borderStyle";
            };
        };
        borderTopS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopStyle";
        }) => {
            borderTopStyle: {
                readonly [Stitches.$$PropertyValue]: "borderTopStyle";
            };
        };
        borderRightS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRightStyle";
        }) => {
            borderRightStyle: {
                readonly [Stitches.$$PropertyValue]: "borderRightStyle";
            };
        };
        borderBottomS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
        }) => {
            borderBottomStyle: {
                readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
            };
        };
        borderLeftS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
        }) => {
            borderLeftStyle: {
                readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
            };
        };
        spacing: (value: {
            readonly [Stitches.$$PropertyValue]: "gap";
        }) => {
            gap: {
                readonly [Stitches.$$PropertyValue]: "gap";
            };
        };
    }>;
} : K extends `@property ${string}` ? import("@stitches/react/types/css").AtRule.Property : import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: Stitches.CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [Stitches.$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [Stitches.$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [Stitches.$$PropertyValue]: "height";
    }, {
        readonly [Stitches.$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [Stitches.$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [Stitches.$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [Stitches.$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [Stitches.$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [Stitches.$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [Stitches.$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [Stitches.$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [Stitches.$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [Stitches.$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [Stitches.$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [Stitches.$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [Stitches.$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [Stitches.$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [Stitches.$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [Stitches.$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [Stitches.$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [Stitches.$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [Stitches.$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [Stitches.$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [Stitches.$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [Stitches.$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [Stitches.$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [Stitches.$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [Stitches.$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [Stitches.$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [Stitches.$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [Stitches.$$PropertyValue]: "gap";
        };
    };
}>; })[]) => () => string;
export declare const keyframes: (style: {
    [offset: string]: import("@stitches/react/types/css-util").CSS<{
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
        motion: string;
        safari: string;
        hover: string;
        dark: string;
        light: string;
    }, {
        shadows: {
            "2xs": string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            outline: string;
            inner: string;
            none: string;
            dark: string;
        };
        colors: {
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            gray7: string;
            gray8: string;
            gray9: string;
            gray10: string;
            gray11: string;
            gray12: string;
            text1: string;
            text2: string;
            text3: string;
            text4: string;
            text5: string;
            text6: string;
            text7: string;
            text8: string;
            text9: string;
            text10: string;
            text11: string;
            text12: string;
            guru1: string;
            guru2: string;
            guru3: string;
            guru4: string;
            guru5: string;
            guru6: string;
            guru7: string;
            guru8: string;
            guru9: string;
            guru10: string;
            guru11: string;
            guru12: string;
            fellow1: string;
            fellow2: string;
            fellow3: string;
            fellow4: string;
            fellow5: string;
            fellow6: string;
            fellow7: string;
            fellow8: string;
            fellow9: string;
            fellow10: string;
            fellow11: string;
            fellow12: string;
            darkie1: string;
            darkie2: string;
            darkie3: string;
            darkie4: string;
            darkie5: string;
            darkie6: string;
            darkie7: string;
            darkie8: string;
            darkie9: string;
            darkie10: string;
            darkie11: string;
            darkie12: string;
            red1: string;
            red2: string;
            red3: string;
            red4: string;
            red5: string;
            red6: string;
            red7: string;
            red8: string;
            red9: string;
            red10: string;
            red11: string;
            red12: string;
            nature1: string;
            nature2: string;
            nature3: string;
            nature4: string;
            nature5: string;
            nature6: string;
            nature7: string;
            nature8: string;
            nature9: string;
            nature10: string;
            nature11: string;
            nature12: string;
            sunshine1: string;
            sunshine2: string;
            sunshine3: string;
            sunshine4: string;
            sunshine5: string;
            sunshine6: string;
            sunshine7: string;
            sunshine8: string;
            sunshine9: string;
            sunshine10: string;
            sunshine11: string;
            sunshine12: string;
            violet1: string;
            violet2: string;
            violet3: string;
            violet4: string;
            violet5: string;
            violet6: string;
            violet7: string;
            violet8: string;
            violet9: string;
            violet10: string;
            violet11: string;
            violet12: string;
            blackA1: string;
            blackA2: string;
            blackA3: string;
            blackA4: string;
            blackA5: string;
            blackA6: string;
            blackA7: string;
            blackA8: string;
            blackA9: string;
            blackA10: string;
            blackA11: string;
            blackA12: string;
            whiteA1: string;
            whiteA2: string;
            whiteA3: string;
            whiteA4: string;
            whiteA5: string;
            whiteA6: string;
            whiteA7: string;
            whiteA8: string;
            whiteA9: string;
            whiteA10: string;
            whiteA11: string;
            whiteA12: string;
            transparent: string;
            placeholder: string;
            surfaceLight: string;
            surfaceMid: string;
            surfaceDark: string;
        };
        fonts: {
            heading: string;
            base: string;
            mono: string;
        };
        fontSizes: {
            "2xs": string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
            black: number;
        };
        lineHeights: {
            normal: string;
            none: number;
            shorter: number;
            short: number;
            base: number;
            tall: number;
            taller: string;
            "3": string;
            "4": string;
            "5": string;
            "6": string;
            "7": string;
            "8": string;
            "9": string;
            "10": string;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        space: {
            px: string;
            0: string;
            0.5: string;
            1: string;
            1.5: string;
            2: string;
            2.5: string;
            3: string;
            3.5: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            12: string;
            14: string;
            16: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            12: string;
            14: string;
            16: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
            max: string;
            min: string;
            full: string;
            "3xs": string;
            "2xs": string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
        };
        radii: {
            none: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
            base: string;
            halfBase: string;
        };
        zIndices: {
            hide: number;
            auto: string;
            base: number;
            docked: number;
            dropdown: number;
            sticky: number;
            banner: number;
            overlay: number;
            modal: number;
            popover: number;
            skipLink: number;
            toast: number;
            tooltip: number;
        };
        borderWeights: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
        };
        transitions: {
            default: string;
        };
        breakpoints: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            xxl: string;
        };
    }, {
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        width: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        height: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {
        _hover: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:hover": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _active: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:active": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _focus: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:focus": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _disabled: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:disabled": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _visited: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:visited": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _focusWithin: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:focus-within": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _focusVisible: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:focus-visible": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _target: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:target": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _placeholder: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&::placeholder": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        bg: (value: {
            readonly [Stitches.$$PropertyValue]: "color";
        }) => {
            background: {
                readonly [Stitches.$$PropertyValue]: "color";
            };
        };
        bgColor: (value: {
            readonly [Stitches.$$PropertyValue]: "color";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "color";
            };
        };
        bgImage: (value: {
            readonly [Stitches.$$PropertyValue]: "color";
        }) => {
            backgroundImage: {
                readonly [Stitches.$$PropertyValue]: "color";
            };
        };
        linearGradient: (value: string) => {
            backgroundImage: string;
        };
        br: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        rounded: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedTop: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedBottom: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedLeft: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedRight: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        size: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        btnSize: ([size, space]: [{
            readonly [Stitches.$$PropertyValue]: "height";
        }, {
            readonly [Stitches.$$PropertyValue]: "padding";
        }]) => {
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
            paddingInlineStart: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingInlineEnd: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        w: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        minW: (value: {
            readonly [Stitches.$$PropertyValue]: "minWidth";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "minWidth";
            };
        };
        maxW: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidht: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        h: (value: {
            readonly [Stitches.$$PropertyValue]: "height";
        }) => {
            height: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
        };
        minH: (value: {
            readonly [Stitches.$$PropertyValue]: "minHeight";
        }) => {
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "minHeight";
            };
        };
        maxH: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        m: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            margin: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        mt: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        mr: (value: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        }) => {
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginRight";
            };
        };
        mb: (value: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        }) => {
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginBottom";
            };
        };
        ml: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        mx: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        my: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        marginX: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        marginY: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        p: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            padding: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        pt: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        pr: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        }) => {
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingRight";
            };
        };
        pb: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        }) => {
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingBottom";
            };
        };
        pl: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        px: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        py: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        paddingX: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        paddingY: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        shadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        borderW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        }) => {
            borderWidth: {
                readonly [Stitches.$$PropertyValue]: "borderWidth";
            };
        };
        borderTopW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopWidth";
        }) => {
            borderTopWidth: {
                readonly [Stitches.$$PropertyValue]: "borderTopWidth";
            };
        };
        borderRightW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRightWidth";
        }) => {
            borderRightWidth: {
                readonly [Stitches.$$PropertyValue]: "borderRightWidth";
            };
        };
        borderBottomW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
        }) => {
            borderBottomWidth: {
                readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
            };
        };
        borderLeftW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
        }) => {
            borderLeftWidth: {
                readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
            };
        };
        borderS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderStyle";
        }) => {
            borderStyle: {
                readonly [Stitches.$$PropertyValue]: "borderStyle";
            };
        };
        borderTopS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopStyle";
        }) => {
            borderTopStyle: {
                readonly [Stitches.$$PropertyValue]: "borderTopStyle";
            };
        };
        borderRightS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRightStyle";
        }) => {
            borderRightStyle: {
                readonly [Stitches.$$PropertyValue]: "borderRightStyle";
            };
        };
        borderBottomS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
        }) => {
            borderBottomStyle: {
                readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
            };
        };
        borderLeftS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
        }) => {
            borderLeftStyle: {
                readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
            };
        };
        spacing: (value: {
            readonly [Stitches.$$PropertyValue]: "gap";
        }) => {
            gap: {
                readonly [Stitches.$$PropertyValue]: "gap";
            };
        };
    }>;
}) => {
    (): string;
    name: string;
};
export declare const getCssText: () => string;
export declare const theme: string & {
    className: string;
    selector: string;
} & {
    shadows: {
        "2xs": import("@stitches/react/types/theme").Token<"2xs", string, "shadows", string>;
        xs: import("@stitches/react/types/theme").Token<"xs", string, "shadows", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "shadows", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "shadows", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "shadows", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "shadows", string>;
        "2xl": import("@stitches/react/types/theme").Token<"2xl", string, "shadows", string>;
        outline: import("@stitches/react/types/theme").Token<"outline", string, "shadows", string>;
        inner: import("@stitches/react/types/theme").Token<"inner", string, "shadows", string>;
        none: import("@stitches/react/types/theme").Token<"none", string, "shadows", string>;
        dark: import("@stitches/react/types/theme").Token<"dark", string, "shadows", string>;
    };
    colors: {
        gray1: import("@stitches/react/types/theme").Token<"gray1", string, "colors", string>;
        gray2: import("@stitches/react/types/theme").Token<"gray2", string, "colors", string>;
        gray3: import("@stitches/react/types/theme").Token<"gray3", string, "colors", string>;
        gray4: import("@stitches/react/types/theme").Token<"gray4", string, "colors", string>;
        gray5: import("@stitches/react/types/theme").Token<"gray5", string, "colors", string>;
        gray6: import("@stitches/react/types/theme").Token<"gray6", string, "colors", string>;
        gray7: import("@stitches/react/types/theme").Token<"gray7", string, "colors", string>;
        gray8: import("@stitches/react/types/theme").Token<"gray8", string, "colors", string>;
        gray9: import("@stitches/react/types/theme").Token<"gray9", string, "colors", string>;
        gray10: import("@stitches/react/types/theme").Token<"gray10", string, "colors", string>;
        gray11: import("@stitches/react/types/theme").Token<"gray11", string, "colors", string>;
        gray12: import("@stitches/react/types/theme").Token<"gray12", string, "colors", string>;
        text1: import("@stitches/react/types/theme").Token<"text1", string, "colors", string>;
        text2: import("@stitches/react/types/theme").Token<"text2", string, "colors", string>;
        text3: import("@stitches/react/types/theme").Token<"text3", string, "colors", string>;
        text4: import("@stitches/react/types/theme").Token<"text4", string, "colors", string>;
        text5: import("@stitches/react/types/theme").Token<"text5", string, "colors", string>;
        text6: import("@stitches/react/types/theme").Token<"text6", string, "colors", string>;
        text7: import("@stitches/react/types/theme").Token<"text7", string, "colors", string>;
        text8: import("@stitches/react/types/theme").Token<"text8", string, "colors", string>;
        text9: import("@stitches/react/types/theme").Token<"text9", string, "colors", string>;
        text10: import("@stitches/react/types/theme").Token<"text10", string, "colors", string>;
        text11: import("@stitches/react/types/theme").Token<"text11", string, "colors", string>;
        text12: import("@stitches/react/types/theme").Token<"text12", string, "colors", string>;
        guru1: import("@stitches/react/types/theme").Token<"guru1", string, "colors", string>;
        guru2: import("@stitches/react/types/theme").Token<"guru2", string, "colors", string>;
        guru3: import("@stitches/react/types/theme").Token<"guru3", string, "colors", string>;
        guru4: import("@stitches/react/types/theme").Token<"guru4", string, "colors", string>;
        guru5: import("@stitches/react/types/theme").Token<"guru5", string, "colors", string>;
        guru6: import("@stitches/react/types/theme").Token<"guru6", string, "colors", string>;
        guru7: import("@stitches/react/types/theme").Token<"guru7", string, "colors", string>;
        guru8: import("@stitches/react/types/theme").Token<"guru8", string, "colors", string>;
        guru9: import("@stitches/react/types/theme").Token<"guru9", string, "colors", string>;
        guru10: import("@stitches/react/types/theme").Token<"guru10", string, "colors", string>;
        guru11: import("@stitches/react/types/theme").Token<"guru11", string, "colors", string>;
        guru12: import("@stitches/react/types/theme").Token<"guru12", string, "colors", string>;
        fellow1: import("@stitches/react/types/theme").Token<"fellow1", string, "colors", string>;
        fellow2: import("@stitches/react/types/theme").Token<"fellow2", string, "colors", string>;
        fellow3: import("@stitches/react/types/theme").Token<"fellow3", string, "colors", string>;
        fellow4: import("@stitches/react/types/theme").Token<"fellow4", string, "colors", string>;
        fellow5: import("@stitches/react/types/theme").Token<"fellow5", string, "colors", string>;
        fellow6: import("@stitches/react/types/theme").Token<"fellow6", string, "colors", string>;
        fellow7: import("@stitches/react/types/theme").Token<"fellow7", string, "colors", string>;
        fellow8: import("@stitches/react/types/theme").Token<"fellow8", string, "colors", string>;
        fellow9: import("@stitches/react/types/theme").Token<"fellow9", string, "colors", string>;
        fellow10: import("@stitches/react/types/theme").Token<"fellow10", string, "colors", string>;
        fellow11: import("@stitches/react/types/theme").Token<"fellow11", string, "colors", string>;
        fellow12: import("@stitches/react/types/theme").Token<"fellow12", string, "colors", string>;
        darkie1: import("@stitches/react/types/theme").Token<"darkie1", string, "colors", string>;
        darkie2: import("@stitches/react/types/theme").Token<"darkie2", string, "colors", string>;
        darkie3: import("@stitches/react/types/theme").Token<"darkie3", string, "colors", string>;
        darkie4: import("@stitches/react/types/theme").Token<"darkie4", string, "colors", string>;
        darkie5: import("@stitches/react/types/theme").Token<"darkie5", string, "colors", string>;
        darkie6: import("@stitches/react/types/theme").Token<"darkie6", string, "colors", string>;
        darkie7: import("@stitches/react/types/theme").Token<"darkie7", string, "colors", string>;
        darkie8: import("@stitches/react/types/theme").Token<"darkie8", string, "colors", string>;
        darkie9: import("@stitches/react/types/theme").Token<"darkie9", string, "colors", string>;
        darkie10: import("@stitches/react/types/theme").Token<"darkie10", string, "colors", string>;
        darkie11: import("@stitches/react/types/theme").Token<"darkie11", string, "colors", string>;
        darkie12: import("@stitches/react/types/theme").Token<"darkie12", string, "colors", string>;
        red1: import("@stitches/react/types/theme").Token<"red1", string, "colors", string>;
        red2: import("@stitches/react/types/theme").Token<"red2", string, "colors", string>;
        red3: import("@stitches/react/types/theme").Token<"red3", string, "colors", string>;
        red4: import("@stitches/react/types/theme").Token<"red4", string, "colors", string>;
        red5: import("@stitches/react/types/theme").Token<"red5", string, "colors", string>;
        red6: import("@stitches/react/types/theme").Token<"red6", string, "colors", string>;
        red7: import("@stitches/react/types/theme").Token<"red7", string, "colors", string>;
        red8: import("@stitches/react/types/theme").Token<"red8", string, "colors", string>;
        red9: import("@stitches/react/types/theme").Token<"red9", string, "colors", string>;
        red10: import("@stitches/react/types/theme").Token<"red10", string, "colors", string>;
        red11: import("@stitches/react/types/theme").Token<"red11", string, "colors", string>;
        red12: import("@stitches/react/types/theme").Token<"red12", string, "colors", string>;
        nature1: import("@stitches/react/types/theme").Token<"nature1", string, "colors", string>;
        nature2: import("@stitches/react/types/theme").Token<"nature2", string, "colors", string>;
        nature3: import("@stitches/react/types/theme").Token<"nature3", string, "colors", string>;
        nature4: import("@stitches/react/types/theme").Token<"nature4", string, "colors", string>;
        nature5: import("@stitches/react/types/theme").Token<"nature5", string, "colors", string>;
        nature6: import("@stitches/react/types/theme").Token<"nature6", string, "colors", string>;
        nature7: import("@stitches/react/types/theme").Token<"nature7", string, "colors", string>;
        nature8: import("@stitches/react/types/theme").Token<"nature8", string, "colors", string>;
        nature9: import("@stitches/react/types/theme").Token<"nature9", string, "colors", string>;
        nature10: import("@stitches/react/types/theme").Token<"nature10", string, "colors", string>;
        nature11: import("@stitches/react/types/theme").Token<"nature11", string, "colors", string>;
        nature12: import("@stitches/react/types/theme").Token<"nature12", string, "colors", string>;
        sunshine1: import("@stitches/react/types/theme").Token<"sunshine1", string, "colors", string>;
        sunshine2: import("@stitches/react/types/theme").Token<"sunshine2", string, "colors", string>;
        sunshine3: import("@stitches/react/types/theme").Token<"sunshine3", string, "colors", string>;
        sunshine4: import("@stitches/react/types/theme").Token<"sunshine4", string, "colors", string>;
        sunshine5: import("@stitches/react/types/theme").Token<"sunshine5", string, "colors", string>;
        sunshine6: import("@stitches/react/types/theme").Token<"sunshine6", string, "colors", string>;
        sunshine7: import("@stitches/react/types/theme").Token<"sunshine7", string, "colors", string>;
        sunshine8: import("@stitches/react/types/theme").Token<"sunshine8", string, "colors", string>;
        sunshine9: import("@stitches/react/types/theme").Token<"sunshine9", string, "colors", string>;
        sunshine10: import("@stitches/react/types/theme").Token<"sunshine10", string, "colors", string>;
        sunshine11: import("@stitches/react/types/theme").Token<"sunshine11", string, "colors", string>;
        sunshine12: import("@stitches/react/types/theme").Token<"sunshine12", string, "colors", string>;
        violet1: import("@stitches/react/types/theme").Token<"violet1", string, "colors", string>;
        violet2: import("@stitches/react/types/theme").Token<"violet2", string, "colors", string>;
        violet3: import("@stitches/react/types/theme").Token<"violet3", string, "colors", string>;
        violet4: import("@stitches/react/types/theme").Token<"violet4", string, "colors", string>;
        violet5: import("@stitches/react/types/theme").Token<"violet5", string, "colors", string>;
        violet6: import("@stitches/react/types/theme").Token<"violet6", string, "colors", string>;
        violet7: import("@stitches/react/types/theme").Token<"violet7", string, "colors", string>;
        violet8: import("@stitches/react/types/theme").Token<"violet8", string, "colors", string>;
        violet9: import("@stitches/react/types/theme").Token<"violet9", string, "colors", string>;
        violet10: import("@stitches/react/types/theme").Token<"violet10", string, "colors", string>;
        violet11: import("@stitches/react/types/theme").Token<"violet11", string, "colors", string>;
        violet12: import("@stitches/react/types/theme").Token<"violet12", string, "colors", string>;
        blackA1: import("@stitches/react/types/theme").Token<"blackA1", string, "colors", string>;
        blackA2: import("@stitches/react/types/theme").Token<"blackA2", string, "colors", string>;
        blackA3: import("@stitches/react/types/theme").Token<"blackA3", string, "colors", string>;
        blackA4: import("@stitches/react/types/theme").Token<"blackA4", string, "colors", string>;
        blackA5: import("@stitches/react/types/theme").Token<"blackA5", string, "colors", string>;
        blackA6: import("@stitches/react/types/theme").Token<"blackA6", string, "colors", string>;
        blackA7: import("@stitches/react/types/theme").Token<"blackA7", string, "colors", string>;
        blackA8: import("@stitches/react/types/theme").Token<"blackA8", string, "colors", string>;
        blackA9: import("@stitches/react/types/theme").Token<"blackA9", string, "colors", string>;
        blackA10: import("@stitches/react/types/theme").Token<"blackA10", string, "colors", string>;
        blackA11: import("@stitches/react/types/theme").Token<"blackA11", string, "colors", string>;
        blackA12: import("@stitches/react/types/theme").Token<"blackA12", string, "colors", string>;
        whiteA1: import("@stitches/react/types/theme").Token<"whiteA1", string, "colors", string>;
        whiteA2: import("@stitches/react/types/theme").Token<"whiteA2", string, "colors", string>;
        whiteA3: import("@stitches/react/types/theme").Token<"whiteA3", string, "colors", string>;
        whiteA4: import("@stitches/react/types/theme").Token<"whiteA4", string, "colors", string>;
        whiteA5: import("@stitches/react/types/theme").Token<"whiteA5", string, "colors", string>;
        whiteA6: import("@stitches/react/types/theme").Token<"whiteA6", string, "colors", string>;
        whiteA7: import("@stitches/react/types/theme").Token<"whiteA7", string, "colors", string>;
        whiteA8: import("@stitches/react/types/theme").Token<"whiteA8", string, "colors", string>;
        whiteA9: import("@stitches/react/types/theme").Token<"whiteA9", string, "colors", string>;
        whiteA10: import("@stitches/react/types/theme").Token<"whiteA10", string, "colors", string>;
        whiteA11: import("@stitches/react/types/theme").Token<"whiteA11", string, "colors", string>;
        whiteA12: import("@stitches/react/types/theme").Token<"whiteA12", string, "colors", string>;
        transparent: import("@stitches/react/types/theme").Token<"transparent", string, "colors", string>;
        placeholder: import("@stitches/react/types/theme").Token<"placeholder", string, "colors", string>;
        surfaceLight: import("@stitches/react/types/theme").Token<"surfaceLight", string, "colors", string>;
        surfaceMid: import("@stitches/react/types/theme").Token<"surfaceMid", string, "colors", string>;
        surfaceDark: import("@stitches/react/types/theme").Token<"surfaceDark", string, "colors", string>;
    };
    fonts: {
        heading: import("@stitches/react/types/theme").Token<"heading", string, "fonts", string>;
        base: import("@stitches/react/types/theme").Token<"base", string, "fonts", string>;
        mono: import("@stitches/react/types/theme").Token<"mono", string, "fonts", string>;
    };
    fontSizes: {
        "2xs": import("@stitches/react/types/theme").Token<"2xs", string, "fontSizes", string>;
        xs: import("@stitches/react/types/theme").Token<"xs", string, "fontSizes", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "fontSizes", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "fontSizes", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "fontSizes", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "fontSizes", string>;
        "2xl": import("@stitches/react/types/theme").Token<"2xl", string, "fontSizes", string>;
        "3xl": import("@stitches/react/types/theme").Token<"3xl", string, "fontSizes", string>;
        "4xl": import("@stitches/react/types/theme").Token<"4xl", string, "fontSizes", string>;
        "5xl": import("@stitches/react/types/theme").Token<"5xl", string, "fontSizes", string>;
        "6xl": import("@stitches/react/types/theme").Token<"6xl", string, "fontSizes", string>;
    };
    fontWeights: {
        hairline: import("@stitches/react/types/theme").Token<"hairline", string, "fontWeights", string>;
        thin: import("@stitches/react/types/theme").Token<"thin", string, "fontWeights", string>;
        light: import("@stitches/react/types/theme").Token<"light", string, "fontWeights", string>;
        normal: import("@stitches/react/types/theme").Token<"normal", string, "fontWeights", string>;
        medium: import("@stitches/react/types/theme").Token<"medium", string, "fontWeights", string>;
        semibold: import("@stitches/react/types/theme").Token<"semibold", string, "fontWeights", string>;
        bold: import("@stitches/react/types/theme").Token<"bold", string, "fontWeights", string>;
        extrabold: import("@stitches/react/types/theme").Token<"extrabold", string, "fontWeights", string>;
        black: import("@stitches/react/types/theme").Token<"black", string, "fontWeights", string>;
    };
    lineHeights: {
        normal: import("@stitches/react/types/theme").Token<"normal", string, "lineHeights", string>;
        none: import("@stitches/react/types/theme").Token<"none", string, "lineHeights", string>;
        shorter: import("@stitches/react/types/theme").Token<"shorter", string, "lineHeights", string>;
        short: import("@stitches/react/types/theme").Token<"short", string, "lineHeights", string>;
        base: import("@stitches/react/types/theme").Token<"base", string, "lineHeights", string>;
        tall: import("@stitches/react/types/theme").Token<"tall", string, "lineHeights", string>;
        taller: import("@stitches/react/types/theme").Token<"taller", string, "lineHeights", string>;
        3: import("@stitches/react/types/theme").Token<"3", string, "lineHeights", string>;
        4: import("@stitches/react/types/theme").Token<"4", string, "lineHeights", string>;
        5: import("@stitches/react/types/theme").Token<"5", string, "lineHeights", string>;
        6: import("@stitches/react/types/theme").Token<"6", string, "lineHeights", string>;
        7: import("@stitches/react/types/theme").Token<"7", string, "lineHeights", string>;
        8: import("@stitches/react/types/theme").Token<"8", string, "lineHeights", string>;
        9: import("@stitches/react/types/theme").Token<"9", string, "lineHeights", string>;
        10: import("@stitches/react/types/theme").Token<"10", string, "lineHeights", string>;
    };
    letterSpacings: {
        tighter: import("@stitches/react/types/theme").Token<"tighter", string, "letterSpacings", string>;
        tight: import("@stitches/react/types/theme").Token<"tight", string, "letterSpacings", string>;
        normal: import("@stitches/react/types/theme").Token<"normal", string, "letterSpacings", string>;
        wide: import("@stitches/react/types/theme").Token<"wide", string, "letterSpacings", string>;
        wider: import("@stitches/react/types/theme").Token<"wider", string, "letterSpacings", string>;
        widest: import("@stitches/react/types/theme").Token<"widest", string, "letterSpacings", string>;
    };
    space: {
        px: import("@stitches/react/types/theme").Token<"px", string, "space", string>;
        0: import("@stitches/react/types/theme").Token<"0", string, "space", string>;
        0.5: import("@stitches/react/types/theme").Token<"0.5", string, "space", string>;
        1: import("@stitches/react/types/theme").Token<"1", string, "space", string>;
        1.5: import("@stitches/react/types/theme").Token<"1.5", string, "space", string>;
        2: import("@stitches/react/types/theme").Token<"2", string, "space", string>;
        2.5: import("@stitches/react/types/theme").Token<"2.5", string, "space", string>;
        3: import("@stitches/react/types/theme").Token<"3", string, "space", string>;
        3.5: import("@stitches/react/types/theme").Token<"3.5", string, "space", string>;
        4: import("@stitches/react/types/theme").Token<"4", string, "space", string>;
        5: import("@stitches/react/types/theme").Token<"5", string, "space", string>;
        6: import("@stitches/react/types/theme").Token<"6", string, "space", string>;
        7: import("@stitches/react/types/theme").Token<"7", string, "space", string>;
        8: import("@stitches/react/types/theme").Token<"8", string, "space", string>;
        9: import("@stitches/react/types/theme").Token<"9", string, "space", string>;
        10: import("@stitches/react/types/theme").Token<"10", string, "space", string>;
        12: import("@stitches/react/types/theme").Token<"12", string, "space", string>;
        14: import("@stitches/react/types/theme").Token<"14", string, "space", string>;
        16: import("@stitches/react/types/theme").Token<"16", string, "space", string>;
        20: import("@stitches/react/types/theme").Token<"20", string, "space", string>;
        24: import("@stitches/react/types/theme").Token<"24", string, "space", string>;
        28: import("@stitches/react/types/theme").Token<"28", string, "space", string>;
        32: import("@stitches/react/types/theme").Token<"32", string, "space", string>;
        36: import("@stitches/react/types/theme").Token<"36", string, "space", string>;
        40: import("@stitches/react/types/theme").Token<"40", string, "space", string>;
        44: import("@stitches/react/types/theme").Token<"44", string, "space", string>;
        48: import("@stitches/react/types/theme").Token<"48", string, "space", string>;
        52: import("@stitches/react/types/theme").Token<"52", string, "space", string>;
        56: import("@stitches/react/types/theme").Token<"56", string, "space", string>;
        60: import("@stitches/react/types/theme").Token<"60", string, "space", string>;
        64: import("@stitches/react/types/theme").Token<"64", string, "space", string>;
        72: import("@stitches/react/types/theme").Token<"72", string, "space", string>;
        80: import("@stitches/react/types/theme").Token<"80", string, "space", string>;
        96: import("@stitches/react/types/theme").Token<"96", string, "space", string>;
    };
    sizes: {
        1: import("@stitches/react/types/theme").Token<"1", string, "sizes", string>;
        2: import("@stitches/react/types/theme").Token<"2", string, "sizes", string>;
        3: import("@stitches/react/types/theme").Token<"3", string, "sizes", string>;
        4: import("@stitches/react/types/theme").Token<"4", string, "sizes", string>;
        5: import("@stitches/react/types/theme").Token<"5", string, "sizes", string>;
        6: import("@stitches/react/types/theme").Token<"6", string, "sizes", string>;
        7: import("@stitches/react/types/theme").Token<"7", string, "sizes", string>;
        8: import("@stitches/react/types/theme").Token<"8", string, "sizes", string>;
        9: import("@stitches/react/types/theme").Token<"9", string, "sizes", string>;
        10: import("@stitches/react/types/theme").Token<"10", string, "sizes", string>;
        12: import("@stitches/react/types/theme").Token<"12", string, "sizes", string>;
        14: import("@stitches/react/types/theme").Token<"14", string, "sizes", string>;
        16: import("@stitches/react/types/theme").Token<"16", string, "sizes", string>;
        20: import("@stitches/react/types/theme").Token<"20", string, "sizes", string>;
        24: import("@stitches/react/types/theme").Token<"24", string, "sizes", string>;
        28: import("@stitches/react/types/theme").Token<"28", string, "sizes", string>;
        32: import("@stitches/react/types/theme").Token<"32", string, "sizes", string>;
        36: import("@stitches/react/types/theme").Token<"36", string, "sizes", string>;
        40: import("@stitches/react/types/theme").Token<"40", string, "sizes", string>;
        44: import("@stitches/react/types/theme").Token<"44", string, "sizes", string>;
        48: import("@stitches/react/types/theme").Token<"48", string, "sizes", string>;
        52: import("@stitches/react/types/theme").Token<"52", string, "sizes", string>;
        56: import("@stitches/react/types/theme").Token<"56", string, "sizes", string>;
        60: import("@stitches/react/types/theme").Token<"60", string, "sizes", string>;
        64: import("@stitches/react/types/theme").Token<"64", string, "sizes", string>;
        72: import("@stitches/react/types/theme").Token<"72", string, "sizes", string>;
        80: import("@stitches/react/types/theme").Token<"80", string, "sizes", string>;
        96: import("@stitches/react/types/theme").Token<"96", string, "sizes", string>;
        max: import("@stitches/react/types/theme").Token<"max", string, "sizes", string>;
        min: import("@stitches/react/types/theme").Token<"min", string, "sizes", string>;
        full: import("@stitches/react/types/theme").Token<"full", string, "sizes", string>;
        "3xs": import("@stitches/react/types/theme").Token<"3xs", string, "sizes", string>;
        "2xs": import("@stitches/react/types/theme").Token<"2xs", string, "sizes", string>;
        xs: import("@stitches/react/types/theme").Token<"xs", string, "sizes", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "sizes", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "sizes", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "sizes", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "sizes", string>;
        "2xl": import("@stitches/react/types/theme").Token<"2xl", string, "sizes", string>;
        "3xl": import("@stitches/react/types/theme").Token<"3xl", string, "sizes", string>;
        "4xl": import("@stitches/react/types/theme").Token<"4xl", string, "sizes", string>;
        "5xl": import("@stitches/react/types/theme").Token<"5xl", string, "sizes", string>;
        "6xl": import("@stitches/react/types/theme").Token<"6xl", string, "sizes", string>;
        "7xl": import("@stitches/react/types/theme").Token<"7xl", string, "sizes", string>;
        "8xl": import("@stitches/react/types/theme").Token<"8xl", string, "sizes", string>;
    };
    radii: {
        none: import("@stitches/react/types/theme").Token<"none", string, "radii", string>;
        xs: import("@stitches/react/types/theme").Token<"xs", string, "radii", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "radii", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "radii", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "radii", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "radii", string>;
        "2xl": import("@stitches/react/types/theme").Token<"2xl", string, "radii", string>;
        "3xl": import("@stitches/react/types/theme").Token<"3xl", string, "radii", string>;
        full: import("@stitches/react/types/theme").Token<"full", string, "radii", string>;
        base: import("@stitches/react/types/theme").Token<"base", string, "radii", string>;
        halfBase: import("@stitches/react/types/theme").Token<"halfBase", string, "radii", string>;
    };
    zIndices: {
        hide: import("@stitches/react/types/theme").Token<"hide", string, "zIndices", string>;
        auto: import("@stitches/react/types/theme").Token<"auto", string, "zIndices", string>;
        base: import("@stitches/react/types/theme").Token<"base", string, "zIndices", string>;
        docked: import("@stitches/react/types/theme").Token<"docked", string, "zIndices", string>;
        dropdown: import("@stitches/react/types/theme").Token<"dropdown", string, "zIndices", string>;
        sticky: import("@stitches/react/types/theme").Token<"sticky", string, "zIndices", string>;
        banner: import("@stitches/react/types/theme").Token<"banner", string, "zIndices", string>;
        overlay: import("@stitches/react/types/theme").Token<"overlay", string, "zIndices", string>;
        modal: import("@stitches/react/types/theme").Token<"modal", string, "zIndices", string>;
        popover: import("@stitches/react/types/theme").Token<"popover", string, "zIndices", string>;
        skipLink: import("@stitches/react/types/theme").Token<"skipLink", string, "zIndices", string>;
        toast: import("@stitches/react/types/theme").Token<"toast", string, "zIndices", string>;
        tooltip: import("@stitches/react/types/theme").Token<"tooltip", string, "zIndices", string>;
    };
    borderWeights: {
        light: import("@stitches/react/types/theme").Token<"light", string, "borderWeights", string>;
        normal: import("@stitches/react/types/theme").Token<"normal", string, "borderWeights", string>;
        bold: import("@stitches/react/types/theme").Token<"bold", string, "borderWeights", string>;
        extrabold: import("@stitches/react/types/theme").Token<"extrabold", string, "borderWeights", string>;
        black: import("@stitches/react/types/theme").Token<"black", string, "borderWeights", string>;
    };
    transitions: {
        default: import("@stitches/react/types/theme").Token<"default", string, "transitions", string>;
    };
    breakpoints: {
        xs: import("@stitches/react/types/theme").Token<"xs", string, "breakpoints", string>;
        sm: import("@stitches/react/types/theme").Token<"sm", string, "breakpoints", string>;
        md: import("@stitches/react/types/theme").Token<"md", string, "breakpoints", string>;
        lg: import("@stitches/react/types/theme").Token<"lg", string, "breakpoints", string>;
        xl: import("@stitches/react/types/theme").Token<"xl", string, "breakpoints", string>;
        xxl: import("@stitches/react/types/theme").Token<"xxl", string, "breakpoints", string>;
    };
};
export declare const config: {
    prefix: string;
    media: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
        motion: string;
        safari: string;
        hover: string;
        dark: string;
        light: string;
    };
    theme: {
        shadows: {
            "2xs": string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            outline: string;
            inner: string;
            none: string;
            dark: string;
        };
        colors: {
            gray1: string;
            gray2: string;
            gray3: string;
            gray4: string;
            gray5: string;
            gray6: string;
            gray7: string;
            gray8: string;
            gray9: string;
            gray10: string;
            gray11: string;
            gray12: string;
            text1: string;
            text2: string;
            text3: string;
            text4: string;
            text5: string;
            text6: string;
            text7: string;
            text8: string;
            text9: string;
            text10: string;
            text11: string;
            text12: string;
            guru1: string;
            guru2: string;
            guru3: string;
            guru4: string;
            guru5: string;
            guru6: string;
            guru7: string;
            guru8: string;
            guru9: string;
            guru10: string;
            guru11: string;
            guru12: string;
            fellow1: string;
            fellow2: string;
            fellow3: string;
            fellow4: string;
            fellow5: string;
            fellow6: string;
            fellow7: string;
            fellow8: string;
            fellow9: string;
            fellow10: string;
            fellow11: string;
            fellow12: string;
            darkie1: string;
            darkie2: string;
            darkie3: string;
            darkie4: string;
            darkie5: string;
            darkie6: string;
            darkie7: string;
            darkie8: string;
            darkie9: string;
            darkie10: string;
            darkie11: string;
            darkie12: string;
            red1: string;
            red2: string;
            red3: string;
            red4: string;
            red5: string;
            red6: string;
            red7: string;
            red8: string;
            red9: string;
            red10: string;
            red11: string;
            red12: string;
            nature1: string;
            nature2: string;
            nature3: string;
            nature4: string;
            nature5: string;
            nature6: string;
            nature7: string;
            nature8: string;
            nature9: string;
            nature10: string;
            nature11: string;
            nature12: string;
            sunshine1: string;
            sunshine2: string;
            sunshine3: string;
            sunshine4: string;
            sunshine5: string;
            sunshine6: string;
            sunshine7: string;
            sunshine8: string;
            sunshine9: string;
            sunshine10: string;
            sunshine11: string;
            sunshine12: string;
            violet1: string;
            violet2: string;
            violet3: string;
            violet4: string;
            violet5: string;
            violet6: string;
            violet7: string;
            violet8: string;
            violet9: string;
            violet10: string;
            violet11: string;
            violet12: string;
            blackA1: string;
            blackA2: string;
            blackA3: string;
            blackA4: string;
            blackA5: string;
            blackA6: string;
            blackA7: string;
            blackA8: string;
            blackA9: string;
            blackA10: string;
            blackA11: string;
            blackA12: string;
            whiteA1: string;
            whiteA2: string;
            whiteA3: string;
            whiteA4: string;
            whiteA5: string;
            whiteA6: string;
            whiteA7: string;
            whiteA8: string;
            whiteA9: string;
            whiteA10: string;
            whiteA11: string;
            whiteA12: string;
            transparent: string;
            placeholder: string;
            surfaceLight: string;
            surfaceMid: string;
            surfaceDark: string;
        };
        fonts: {
            heading: string;
            base: string;
            mono: string;
        };
        fontSizes: {
            "2xs": string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
        };
        fontWeights: {
            hairline: number;
            thin: number;
            light: number;
            normal: number;
            medium: number;
            semibold: number;
            bold: number;
            extrabold: number;
            black: number;
        };
        lineHeights: {
            normal: string;
            none: number;
            shorter: number;
            short: number;
            base: number;
            tall: number;
            taller: string;
            "3": string;
            "4": string;
            "5": string;
            "6": string;
            "7": string;
            "8": string;
            "9": string;
            "10": string;
        };
        letterSpacings: {
            tighter: string;
            tight: string;
            normal: string;
            wide: string;
            wider: string;
            widest: string;
        };
        space: {
            px: string;
            0: string;
            0.5: string;
            1: string;
            1.5: string;
            2: string;
            2.5: string;
            3: string;
            3.5: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            12: string;
            14: string;
            16: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
        };
        sizes: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            9: string;
            10: string;
            12: string;
            14: string;
            16: string;
            20: string;
            24: string;
            28: string;
            32: string;
            36: string;
            40: string;
            44: string;
            48: string;
            52: string;
            56: string;
            60: string;
            64: string;
            72: string;
            80: string;
            96: string;
            max: string;
            min: string;
            full: string;
            "3xs": string;
            "2xs": string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            "4xl": string;
            "5xl": string;
            "6xl": string;
            "7xl": string;
            "8xl": string;
        };
        radii: {
            none: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            "2xl": string;
            "3xl": string;
            full: string;
            base: string;
            halfBase: string;
        };
        zIndices: {
            hide: number;
            auto: string;
            base: number;
            docked: number;
            dropdown: number;
            sticky: number;
            banner: number;
            overlay: number;
            modal: number;
            popover: number;
            skipLink: number;
            toast: number;
            tooltip: number;
        };
        borderWeights: {
            light: string;
            normal: string;
            bold: string;
            extrabold: string;
            black: string;
        };
        transitions: {
            default: string;
        };
        breakpoints: {
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            xxl: string;
        };
    };
    themeMap: {
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        width: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        height: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    };
    utils: {
        _hover: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:hover": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _active: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:active": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _focus: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:focus": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _disabled: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:disabled": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _visited: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:visited": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _focusWithin: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:focus-within": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _focusVisible: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:focus-visible": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _target: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&:target": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        _placeholder: (value: Stitches.CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>) => {
            "&::placeholder": Stitches.CSS<{
                media: {};
                theme: {};
                themeMap: {};
                utils: {};
            }>;
        };
        bg: (value: {
            readonly [Stitches.$$PropertyValue]: "color";
        }) => {
            background: {
                readonly [Stitches.$$PropertyValue]: "color";
            };
        };
        bgColor: (value: {
            readonly [Stitches.$$PropertyValue]: "color";
        }) => {
            backgroundColor: {
                readonly [Stitches.$$PropertyValue]: "color";
            };
        };
        bgImage: (value: {
            readonly [Stitches.$$PropertyValue]: "color";
        }) => {
            backgroundImage: {
                readonly [Stitches.$$PropertyValue]: "color";
            };
        };
        linearGradient: (value: string) => {
            backgroundImage: string;
        };
        br: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        rounded: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedTop: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedBottom: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedLeft: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderTopLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderBottomLeftRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        roundedRight: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRadius";
        }) => {
            borderTopRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
            borderBottomRightRadius: {
                readonly [Stitches.$$PropertyValue]: "borderRadius";
            };
        };
        size: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        btnSize: ([size, space]: [{
            readonly [Stitches.$$PropertyValue]: "height";
        }, {
            readonly [Stitches.$$PropertyValue]: "padding";
        }]) => {
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
            height: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
            paddingInlineStart: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingInlineEnd: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        w: (value: {
            readonly [Stitches.$$PropertyValue]: "width";
        }) => {
            width: {
                readonly [Stitches.$$PropertyValue]: "width";
            };
        };
        minW: (value: {
            readonly [Stitches.$$PropertyValue]: "minWidth";
        }) => {
            minWidth: {
                readonly [Stitches.$$PropertyValue]: "minWidth";
            };
        };
        maxW: (value: {
            readonly [Stitches.$$PropertyValue]: "maxWidth";
        }) => {
            maxWidht: {
                readonly [Stitches.$$PropertyValue]: "maxWidth";
            };
        };
        h: (value: {
            readonly [Stitches.$$PropertyValue]: "height";
        }) => {
            height: {
                readonly [Stitches.$$PropertyValue]: "height";
            };
        };
        minH: (value: {
            readonly [Stitches.$$PropertyValue]: "minHeight";
        }) => {
            minHeight: {
                readonly [Stitches.$$PropertyValue]: "minHeight";
            };
        };
        maxH: (value: {
            readonly [Stitches.$$PropertyValue]: "maxHeight";
        }) => {
            maxHeight: {
                readonly [Stitches.$$PropertyValue]: "maxHeight";
            };
        };
        m: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            margin: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        mt: (value: {
            readonly [Stitches.$$PropertyValue]: "marginTop";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "marginTop";
            };
        };
        mr: (value: {
            readonly [Stitches.$$PropertyValue]: "marginRight";
        }) => {
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "marginRight";
            };
        };
        mb: (value: {
            readonly [Stitches.$$PropertyValue]: "marginBottom";
        }) => {
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "marginBottom";
            };
        };
        ml: (value: {
            readonly [Stitches.$$PropertyValue]: "marginLeft";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "marginLeft";
            };
        };
        mx: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        my: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        marginX: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginLeft: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginRight: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        marginY: (value: {
            readonly [Stitches.$$PropertyValue]: "margin";
        }) => {
            marginTop: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
            marginBottom: {
                readonly [Stitches.$$PropertyValue]: "margin";
            };
        };
        p: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            padding: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        pt: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingTop";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "paddingTop";
            };
        };
        pr: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingRight";
        }) => {
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "paddingRight";
            };
        };
        pb: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingBottom";
        }) => {
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "paddingBottom";
            };
        };
        pl: (value: {
            readonly [Stitches.$$PropertyValue]: "paddingLeft";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "paddingLeft";
            };
        };
        px: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        py: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        paddingX: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingLeft: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingRight: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        paddingY: (value: {
            readonly [Stitches.$$PropertyValue]: "padding";
        }) => {
            paddingTop: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
            paddingBottom: {
                readonly [Stitches.$$PropertyValue]: "padding";
            };
        };
        shadow: (value: {
            readonly [Stitches.$$PropertyValue]: "boxShadow";
        }) => {
            boxShadow: {
                readonly [Stitches.$$PropertyValue]: "boxShadow";
            };
        };
        borderW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderWidth";
        }) => {
            borderWidth: {
                readonly [Stitches.$$PropertyValue]: "borderWidth";
            };
        };
        borderTopW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopWidth";
        }) => {
            borderTopWidth: {
                readonly [Stitches.$$PropertyValue]: "borderTopWidth";
            };
        };
        borderRightW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRightWidth";
        }) => {
            borderRightWidth: {
                readonly [Stitches.$$PropertyValue]: "borderRightWidth";
            };
        };
        borderBottomW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
        }) => {
            borderBottomWidth: {
                readonly [Stitches.$$PropertyValue]: "borderBottomWidth";
            };
        };
        borderLeftW: (value: {
            readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
        }) => {
            borderLeftWidth: {
                readonly [Stitches.$$PropertyValue]: "borderLeftWidth";
            };
        };
        borderS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderStyle";
        }) => {
            borderStyle: {
                readonly [Stitches.$$PropertyValue]: "borderStyle";
            };
        };
        borderTopS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderTopStyle";
        }) => {
            borderTopStyle: {
                readonly [Stitches.$$PropertyValue]: "borderTopStyle";
            };
        };
        borderRightS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderRightStyle";
        }) => {
            borderRightStyle: {
                readonly [Stitches.$$PropertyValue]: "borderRightStyle";
            };
        };
        borderBottomS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
        }) => {
            borderBottomStyle: {
                readonly [Stitches.$$PropertyValue]: "borderBottomStyle";
            };
        };
        borderLeftS: (value: {
            readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
        }) => {
            borderLeftStyle: {
                readonly [Stitches.$$PropertyValue]: "borderLeftStyle";
            };
        };
        spacing: (value: {
            readonly [Stitches.$$PropertyValue]: "gap";
        }) => {
            gap: {
                readonly [Stitches.$$PropertyValue]: "gap";
            };
        };
    };
};
export declare const createTheme: ({ type, theme, className }: Theme) => string & {
    className: string;
    selector: string;
} & import("@stitches/react/types/stitches").ThemeTokens<any, string>;
export declare type DefaultProps = {
    id?: string;
    css?: Stitches.CSS<typeof config>;
};
export declare type VariantProps<T> = Stitches.VariantProps<T>;
export declare type ComponentProps<T> = Stitches.ComponentProps<T>;
export declare type PropertyValue<Property extends keyof Stitches.CSSProperties> = Stitches.PropertyValue<Property, typeof config>;
export declare type CSS = Stitches.CSS<typeof config>;
export declare type ScaleValue<T> = Stitches.ScaleValue<T>;
export declare type StitchesTheme = typeof theme;
