import React from "react";
import * as NavigationMenu from "@radix-ui/react-navigation-menu";
export declare const NavigationMenuRoot: import("@stitches/react/types/styled-component").StyledComponent<React.ForwardRefExoticComponent<NavigationMenu.NavigationMenuProps & React.RefAttributes<HTMLElement>>, {
    shadow?: boolean | "true" | "false" | undefined;
    size?: "xs" | "sm" | "md" | "lg" | undefined;
    rounded?: "xs" | "sm" | "md" | "lg" | undefined;
    colorScheme?: "text" | "guru" | "fellow" | "darkie" | "red" | "nature" | "sunshine" | "violet" | "gray" | "primary" | "secondary" | "utilitary" | undefined;
}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const NavigationMenuList: import("@stitches/react/types/styled-component").StyledComponent<React.ForwardRefExoticComponent<NavigationMenu.NavigationMenuListProps & React.RefAttributes<HTMLUListElement>>, {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const NavigationMenuTrigger: import("@stitches/react/types/styled-component").StyledComponent<React.ForwardRefExoticComponent<NavigationMenu.NavigationMenuTriggerProps & React.RefAttributes<HTMLButtonElement>>, {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const NavigationMenuLink: import("@stitches/react/types/styled-component").StyledComponent<React.ForwardRefExoticComponent<NavigationMenu.NavigationMenuLinkProps & React.RefAttributes<HTMLAnchorElement>>, {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const NavigationMenuContent: import("@stitches/react/types/styled-component").StyledComponent<React.ForwardRefExoticComponent<NavigationMenu.NavigationMenuContentProps & React.RefAttributes<HTMLDivElement>>, {
    layout?: "default" | "follow" | undefined;
}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const NavigationMenuItem: import("@stitches/react/types/styled-component").StyledComponent<React.ForwardRefExoticComponent<NavigationMenu.NavigationMenuItemProps & React.RefAttributes<HTMLLIElement>>, {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const NavigationMenuSub: import("@stitches/react/types/styled-component").StyledComponent<React.ForwardRefExoticComponent<NavigationMenu.NavigationMenuSubProps & React.RefAttributes<HTMLDivElement>>, {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const NavigationMenuIndicator: import("@stitches/react/types/styled-component").StyledComponent<React.ForwardRefExoticComponent<NavigationMenu.NavigationMenuIndicatorProps & React.RefAttributes<HTMLDivElement>>, {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const ViewportPosition: import("@stitches/react/types/styled-component").StyledComponent<"div", {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const NavigationMenuViewport: import("@stitches/react/types/styled-component").StyledComponent<React.ForwardRefExoticComponent<NavigationMenu.NavigationMenuViewportProps & React.RefAttributes<HTMLDivElement>>, {
    layout?: "default" | "follow" | undefined;
}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const List: import("@stitches/react/types/styled-component").StyledComponent<"ul", {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const ListItem: React.ForwardRefExoticComponent<Pick<NavigationMenu.NavigationMenuLinkProps & React.RefAttributes<HTMLAnchorElement> & {
    title: string | React.ReactNode;
    description?: string | React.ReactNode;
}, "color" | "translate" | "media" | "placeholder" | "hidden" | "type" | "className" | "prefix" | "children" | "slot" | "style" | "title" | "id" | "dangerouslySetInnerHTML" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "lang" | "nonce" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onResize" | "onResizeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "asChild" | "target" | "href" | "hrefLang" | "referrerPolicy" | "rel" | "download" | "ping" | "active" | "description"> & React.RefAttributes<HTMLAnchorElement>>;
export declare const CaretDown: import("@stitches/react/types/styled-component").StyledComponent<React.MemoExoticComponent<React.ForwardRefExoticComponent<import("../icons/types").TAuraIcon & React.RefAttributes<SVGSVGElement>>>, {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
export declare const Arrow: import("@stitches/react/types/styled-component").StyledComponent<"div", {}, {
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, import("@stitches/react/types/css-util").CSS<{
    xs: string;
    sm: string;
    md: string;
    lg: string;
    xl: string;
    xxl: string;
    motion: string;
    safari: string;
    hover: string;
    dark: string;
    light: string;
}, {
    shadows: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        outline: string;
        inner: string;
        none: string;
        dark: string;
    };
    colors: {
        gray1: string;
        gray2: string;
        gray3: string;
        gray4: string;
        gray5: string;
        gray6: string;
        gray7: string;
        gray8: string;
        gray9: string;
        gray10: string;
        gray11: string;
        gray12: string;
        text1: string;
        text2: string;
        text3: string;
        text4: string;
        text5: string;
        text6: string;
        text7: string;
        text8: string;
        text9: string;
        text10: string;
        text11: string;
        text12: string;
        guru1: string;
        guru2: string;
        guru3: string;
        guru4: string;
        guru5: string;
        guru6: string;
        guru7: string;
        guru8: string;
        guru9: string;
        guru10: string;
        guru11: string;
        guru12: string;
        fellow1: string;
        fellow2: string;
        fellow3: string;
        fellow4: string;
        fellow5: string;
        fellow6: string;
        fellow7: string;
        fellow8: string;
        fellow9: string;
        fellow10: string;
        fellow11: string;
        fellow12: string;
        darkie1: string;
        darkie2: string;
        darkie3: string;
        darkie4: string;
        darkie5: string;
        darkie6: string;
        darkie7: string;
        darkie8: string;
        darkie9: string;
        darkie10: string;
        darkie11: string;
        darkie12: string;
        red1: string;
        red2: string;
        red3: string;
        red4: string;
        red5: string;
        red6: string;
        red7: string;
        red8: string;
        red9: string;
        red10: string;
        red11: string;
        red12: string;
        nature1: string;
        nature2: string;
        nature3: string;
        nature4: string;
        nature5: string;
        nature6: string;
        nature7: string;
        nature8: string;
        nature9: string;
        nature10: string;
        nature11: string;
        nature12: string;
        sunshine1: string;
        sunshine2: string;
        sunshine3: string;
        sunshine4: string;
        sunshine5: string;
        sunshine6: string;
        sunshine7: string;
        sunshine8: string;
        sunshine9: string;
        sunshine10: string;
        sunshine11: string;
        sunshine12: string;
        violet1: string;
        violet2: string;
        violet3: string;
        violet4: string;
        violet5: string;
        violet6: string;
        violet7: string;
        violet8: string;
        violet9: string;
        violet10: string;
        violet11: string;
        violet12: string;
        blackA1: string;
        blackA2: string;
        blackA3: string;
        blackA4: string;
        blackA5: string;
        blackA6: string;
        blackA7: string;
        blackA8: string;
        blackA9: string;
        blackA10: string;
        blackA11: string;
        blackA12: string;
        whiteA1: string;
        whiteA2: string;
        whiteA3: string;
        whiteA4: string;
        whiteA5: string;
        whiteA6: string;
        whiteA7: string;
        whiteA8: string;
        whiteA9: string;
        whiteA10: string;
        whiteA11: string;
        whiteA12: string;
        transparent: string;
        placeholder: string;
        surfaceLight: string;
        surfaceMid: string;
        surfaceDark: string;
    };
    fonts: {
        heading: string;
        base: string;
        mono: string;
    };
    fontSizes: {
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
    };
    fontWeights: {
        hairline: number;
        thin: number;
        light: number;
        normal: number;
        medium: number;
        semibold: number;
        bold: number;
        extrabold: number;
        black: number;
    };
    lineHeights: {
        normal: string;
        none: number;
        shorter: number;
        short: number;
        base: number;
        tall: number;
        taller: string;
        "3": string;
        "4": string;
        "5": string;
        "6": string;
        "7": string;
        "8": string;
        "9": string;
        "10": string;
    };
    letterSpacings: {
        tighter: string;
        tight: string;
        normal: string;
        wide: string;
        wider: string;
        widest: string;
    };
    space: {
        px: string;
        0: string;
        0.5: string;
        1: string;
        1.5: string;
        2: string;
        2.5: string;
        3: string;
        3.5: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
    };
    sizes: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        9: string;
        10: string;
        12: string;
        14: string;
        16: string;
        20: string;
        24: string;
        28: string;
        32: string;
        36: string;
        40: string;
        44: string;
        48: string;
        52: string;
        56: string;
        60: string;
        64: string;
        72: string;
        80: string;
        96: string;
        max: string;
        min: string;
        full: string;
        "3xs": string;
        "2xs": string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        "4xl": string;
        "5xl": string;
        "6xl": string;
        "7xl": string;
        "8xl": string;
    };
    radii: {
        none: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        "2xl": string;
        "3xl": string;
        full: string;
        base: string;
        halfBase: string;
    };
    zIndices: {
        hide: number;
        auto: string;
        base: number;
        docked: number;
        dropdown: number;
        sticky: number;
        banner: number;
        overlay: number;
        modal: number;
        popover: number;
        skipLink: number;
        toast: number;
        tooltip: number;
    };
    borderWeights: {
        light: string;
        normal: string;
        bold: string;
        extrabold: string;
        black: string;
    };
    transitions: {
        default: string;
    };
    breakpoints: {
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        xxl: string;
    };
}, {
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    width: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    height: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {
    _hover: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:hover": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _active: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:active": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focus: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _disabled: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:disabled": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _visited: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:visited": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusWithin: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-within": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _focusVisible: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:focus-visible": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _target: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&:target": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    _placeholder: (value: import("@stitches/react").CSS<{
        media: {};
        theme: {};
        themeMap: {};
        utils: {};
    }>) => {
        "&::placeholder": import("@stitches/react").CSS<{
            media: {};
            theme: {};
            themeMap: {};
            utils: {};
        }>;
    };
    bg: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        background: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgColor: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundColor: {
            readonly [$$PropertyValue]: "color";
        };
    };
    bgImage: (value: {
        readonly [$$PropertyValue]: "color";
    }) => {
        backgroundImage: {
            readonly [$$PropertyValue]: "color";
        };
    };
    linearGradient: (value: string) => {
        backgroundImage: string;
    };
    br: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    rounded: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedTop: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedBottom: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedLeft: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomLeftRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    roundedRight: (value: {
        readonly [$$PropertyValue]: "borderRadius";
    }) => {
        borderTopRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
        borderBottomRightRadius: {
            readonly [$$PropertyValue]: "borderRadius";
        };
    };
    size: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
        height: {
            readonly [$$PropertyValue]: "width";
        };
    };
    btnSize: ([size, space]: [{
        readonly [$$PropertyValue]: "height";
    }, {
        readonly [$$PropertyValue]: "padding";
    }]) => {
        minHeight: {
            readonly [$$PropertyValue]: "height";
        };
        height: {
            readonly [$$PropertyValue]: "height";
        };
        paddingInlineStart: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingInlineEnd: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    w: (value: {
        readonly [$$PropertyValue]: "width";
    }) => {
        width: {
            readonly [$$PropertyValue]: "width";
        };
    };
    minW: (value: {
        readonly [$$PropertyValue]: "minWidth";
    }) => {
        minWidth: {
            readonly [$$PropertyValue]: "minWidth";
        };
    };
    maxW: (value: {
        readonly [$$PropertyValue]: "maxWidth";
    }) => {
        maxWidht: {
            readonly [$$PropertyValue]: "maxWidth";
        };
    };
    h: (value: {
        readonly [$$PropertyValue]: "height";
    }) => {
        height: {
            readonly [$$PropertyValue]: "height";
        };
    };
    minH: (value: {
        readonly [$$PropertyValue]: "minHeight";
    }) => {
        minHeight: {
            readonly [$$PropertyValue]: "minHeight";
        };
    };
    maxH: (value: {
        readonly [$$PropertyValue]: "maxHeight";
    }) => {
        maxHeight: {
            readonly [$$PropertyValue]: "maxHeight";
        };
    };
    m: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        margin: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    mt: (value: {
        readonly [$$PropertyValue]: "marginTop";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "marginTop";
        };
    };
    mr: (value: {
        readonly [$$PropertyValue]: "marginRight";
    }) => {
        marginRight: {
            readonly [$$PropertyValue]: "marginRight";
        };
    };
    mb: (value: {
        readonly [$$PropertyValue]: "marginBottom";
    }) => {
        marginBottom: {
            readonly [$$PropertyValue]: "marginBottom";
        };
    };
    ml: (value: {
        readonly [$$PropertyValue]: "marginLeft";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "marginLeft";
        };
    };
    mx: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    my: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginX: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginLeft: {
            readonly [$$PropertyValue]: "margin";
        };
        marginRight: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    marginY: (value: {
        readonly [$$PropertyValue]: "margin";
    }) => {
        marginTop: {
            readonly [$$PropertyValue]: "margin";
        };
        marginBottom: {
            readonly [$$PropertyValue]: "margin";
        };
    };
    p: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        padding: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    pt: (value: {
        readonly [$$PropertyValue]: "paddingTop";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "paddingTop";
        };
    };
    pr: (value: {
        readonly [$$PropertyValue]: "paddingRight";
    }) => {
        paddingRight: {
            readonly [$$PropertyValue]: "paddingRight";
        };
    };
    pb: (value: {
        readonly [$$PropertyValue]: "paddingBottom";
    }) => {
        paddingBottom: {
            readonly [$$PropertyValue]: "paddingBottom";
        };
    };
    pl: (value: {
        readonly [$$PropertyValue]: "paddingLeft";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "paddingLeft";
        };
    };
    px: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    py: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingX: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingLeft: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingRight: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    paddingY: (value: {
        readonly [$$PropertyValue]: "padding";
    }) => {
        paddingTop: {
            readonly [$$PropertyValue]: "padding";
        };
        paddingBottom: {
            readonly [$$PropertyValue]: "padding";
        };
    };
    shadow: (value: {
        readonly [$$PropertyValue]: "boxShadow";
    }) => {
        boxShadow: {
            readonly [$$PropertyValue]: "boxShadow";
        };
    };
    borderW: (value: {
        readonly [$$PropertyValue]: "borderWidth";
    }) => {
        borderWidth: {
            readonly [$$PropertyValue]: "borderWidth";
        };
    };
    borderTopW: (value: {
        readonly [$$PropertyValue]: "borderTopWidth";
    }) => {
        borderTopWidth: {
            readonly [$$PropertyValue]: "borderTopWidth";
        };
    };
    borderRightW: (value: {
        readonly [$$PropertyValue]: "borderRightWidth";
    }) => {
        borderRightWidth: {
            readonly [$$PropertyValue]: "borderRightWidth";
        };
    };
    borderBottomW: (value: {
        readonly [$$PropertyValue]: "borderBottomWidth";
    }) => {
        borderBottomWidth: {
            readonly [$$PropertyValue]: "borderBottomWidth";
        };
    };
    borderLeftW: (value: {
        readonly [$$PropertyValue]: "borderLeftWidth";
    }) => {
        borderLeftWidth: {
            readonly [$$PropertyValue]: "borderLeftWidth";
        };
    };
    borderS: (value: {
        readonly [$$PropertyValue]: "borderStyle";
    }) => {
        borderStyle: {
            readonly [$$PropertyValue]: "borderStyle";
        };
    };
    borderTopS: (value: {
        readonly [$$PropertyValue]: "borderTopStyle";
    }) => {
        borderTopStyle: {
            readonly [$$PropertyValue]: "borderTopStyle";
        };
    };
    borderRightS: (value: {
        readonly [$$PropertyValue]: "borderRightStyle";
    }) => {
        borderRightStyle: {
            readonly [$$PropertyValue]: "borderRightStyle";
        };
    };
    borderBottomS: (value: {
        readonly [$$PropertyValue]: "borderBottomStyle";
    }) => {
        borderBottomStyle: {
            readonly [$$PropertyValue]: "borderBottomStyle";
        };
    };
    borderLeftS: (value: {
        readonly [$$PropertyValue]: "borderLeftStyle";
    }) => {
        borderLeftStyle: {
            readonly [$$PropertyValue]: "borderLeftStyle";
        };
    };
    spacing: (value: {
        readonly [$$PropertyValue]: "gap";
    }) => {
        gap: {
            readonly [$$PropertyValue]: "gap";
        };
    };
}>>;
